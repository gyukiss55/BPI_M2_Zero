Creating a TCP/IP server on a Banana Pi M2 Zero using C++ involves several steps, including setting up the development environment, writing the server code, and testing the server. Below is a basic example of a TCP/IP server using C++ on a Linux-based system like the Banana Pi M2 Zero.

### Prerequisites
1. A Banana Pi M2 Zero with a Linux-based operating system (e.g., Armbian).
2. Basic knowledge of C++ and socket programming.
3. Access to a terminal or SSH into the Banana Pi M2 Zero.

### Step-by-Step Guide

1. **Set up the development environment:**
   - Ensure your system is up to date:
     ```sh
     sudo apt update
     sudo apt upgrade
     ```
   - Install the necessary build tools:
     ```sh
     sudo apt install build-essential
     ```

2. **Write the TCP/IP server code:**

Create a new file named `tcp_server.cpp` and add the following code:

```cpp
#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define PORT 8080
#define BUFFER_SIZE 1024

void error(const char *msg) {
    perror(msg);
    exit(1);
}

int main() {
    int sockfd, newsockfd;
    socklen_t clilen;
    char buffer[BUFFER_SIZE];
    struct sockaddr_in serv_addr, cli_addr;
    int n;

    // Create socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        error("ERROR opening socket");
    }

    // Initialize socket structure
    bzero((char *)&serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(PORT);

    // Bind the host address
    if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        error("ERROR on binding");
    }

    // Start listening for clients (with a backlog of 5)
    listen(sockfd, 5);
    clilen = sizeof(cli_addr);

    // Accept actual connection from the client
    newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);
    if (newsockfd < 0) {
        error("ERROR on accept");
    }

    // If connection is established, start communicating
    bzero(buffer, BUFFER_SIZE);
    n = read(newsockfd, buffer, BUFFER_SIZE - 1);
    if (n < 0) {
        error("ERROR reading from socket");
    }
    std::cout << "Here is the message: " << buffer << std::endl;

    // Write a response to the client
    const char *response = "I got your message";
    n = write(newsockfd, response, strlen(response));
    if (n < 0) {
        error("ERROR writing to socket");
    }

    // Close the sockets
    close(newsockfd);
    close(sockfd);
    return 0;
}
```

### Explanation
- **Socket Creation:** `socket()` creates a new socket.
- **Binding:** `bind()` binds the socket to an address and port number specified in `serv_addr`.
- **Listening:** `listen()` marks the socket as a passive socket to accept incoming connections.
- **Accepting Connections:** `accept()` blocks until a connection is present.
- **Communication:** `read()` reads the message from the client, and `write()` sends a response.
- **Closing Sockets:** `close()` closes the socket descriptors.

3. **Compile the server code:**

Compile the `tcp_server.cpp` file using g++:
```sh
g++ -o tcp_server tcp_server.cpp
```

4. **Run the server:**

Run the compiled server program:
```sh
sudo ./tcp_server
```
The server will wait for a connection on port 8080.

5. **Test the server:**

You can test the server using `telnet` or `nc` (netcat) from another terminal or computer.

For example, using `nc`:
```sh
nc <BPI-M2-Zero-IP> 8080
```

Type a message and press enter. You should see the message echoed back by the server.

### Additional Notes
- This is a basic example and lacks error handling and multi-client support. For a production server, consider implementing more robust error checking and handling multiple clients concurrently.
- For handling multiple clients, you can use threading (e.g., std::thread in C++) or asynchronous I/O.
- Ensure that port 8080 is open and not blocked by any firewall on your Banana Pi M2 Zero.

This example provides a basic TCP/IP server using C++ suitable for running on a Banana Pi M2 Zero. For more complex use cases, consider using libraries such as Boost.Asio.