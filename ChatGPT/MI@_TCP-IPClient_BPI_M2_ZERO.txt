Creating a TCP/IP client on a Banana Pi M2 Zero using C++ involves setting up the development environment, writing the client code, and testing the client. Below is a step-by-step guide along with the example code.

### Prerequisites
1. **Banana Pi M2 Zero** with a Linux-based operating system (e.g., Armbian).
2. **Basic knowledge of C++** and socket programming.
3. **Access to a terminal** or SSH into the Banana Pi M2 Zero.

### Step-by-Step Guide

1. **Set up the development environment:**
   - Ensure your system is up to date:
     ```sh
     sudo apt update
     sudo apt upgrade
     ```
   - Install the necessary build tools:
     ```sh
     sudo apt install build-essential
     ```

2. **Write the TCP/IP client code:**

Create a new file named `tcp_client.cpp` and add the following code:

```cpp
#include <iostream>
#include <cstring>
#include <unistd.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"  // Replace with the server's IP address
#define SERVER_PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[BUFFER_SIZE] = {0};

    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        std::cerr << "Socket creation error" << std::endl;
        return -1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(SERVER_PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, SERVER_IP, &serv_addr.sin_addr) <= 0) {
        std::cerr << "Invalid address / Address not supported" << std::endl;
        return -1;
    }

    // Connect to the server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        std::cerr << "Connection failed" << std::endl;
        return -1;
    }

    // Send a message to the server
    const char *hello = "Hello from client";
    send(sock, hello, strlen(hello), 0);
    std::cout << "Message sent to server" << std::endl;

    // Receive a message from the server
    int valread = read(sock, buffer, BUFFER_SIZE);
    std::cout << "Message received from server: " << buffer << std::endl;

    // Close the socket
    close(sock);
    return 0;
}
```

### Explanation
- **Create a socket:** `socket()` creates a new socket.
- **Set up the server address:** `serv_addr` holds the server's address and port.
- **Convert the IP address:** `inet_pton()` converts the IP address from text to binary form.
- **Connect to the server:** `connect()` establishes the connection to the server.
- **Send a message:** `send()` sends a message to the server.
- **Receive a message:** `read()` receives a message from the server.
- **Close the socket:** `close()` closes the socket.

3. **Compile the client code:**

Compile the `tcp_client.cpp` file using `g++`:
```sh
g++ -o tcp_client tcp_client.cpp
```

4. **Run the client:**

Run the compiled client program:
```sh
./tcp_client
```
This will connect to the server at `127.0.0.1` on port `8080`, send a message, and print the response from the server.

### Testing the Client

To test the client, you need a server running that it can connect to. Here is a simple TCP server in Python for testing purposes:

**tcp_server.py:**
```python
import socket

SERVER_IP = '0.0.0.0'
SERVER_PORT = 8080
BUFFER_SIZE = 1024

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((SERVER_IP, SERVER_PORT))
server_socket.listen(1)
print("Server is listening on port", SERVER_PORT)

while True:
    client_socket, client_address = server_socket.accept()
    print("Connection from", client_address)
    data = client_socket.recv(BUFFER_SIZE)
    print("Received message:", data.decode())
    client_socket.send("Hello from server".encode())
    client_socket.close()
```

Run this server on your Banana Pi M2 Zero or another machine that the client can connect to:
```sh
python3 tcp_server.py
```

Then run the `tcp_client` program. You should see the interaction between the client and the server.

### Conclusion

This guide shows how to set up a TCP/IP client on a Banana Pi M2 Zero using C++. The example provided demonstrates the basic steps of creating a socket, connecting to a server, sending and receiving messages, and closing the socket. This can be expanded upon for more complex applications as needed.